[
  {
    "objectID": "core/workflow_session.html",
    "href": "core/workflow_session.html",
    "title": "WorkflowSession",
    "section": "",
    "text": "The WorkflowSession class provides a scoped view of FastHTML session data for a specific workflow. This prevents key collisions when multiple workflows are active in the same application.\nEach workflow gets its own namespace within the session, making it easy to manage multi-step processes without worrying about overwriting data from other workflows.\n\nsource\n\n\n\n WorkflowSession (sess:Any, workflow_id:str)\n\nManage workflow state within FastHTML sessions with proper namespacing.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsess\nAny\nFastHTML session object (from route handler parameter)\n\n\nworkflow_id\nstr\nUnique identifier for this workflow (e.g., “registration”, “checkout”)",
    "crumbs": [
      "core",
      "WorkflowSession"
    ]
  },
  {
    "objectID": "core/workflow_session.html#workflowsession-class",
    "href": "core/workflow_session.html#workflowsession-class",
    "title": "WorkflowSession",
    "section": "",
    "text": "The WorkflowSession class provides a scoped view of FastHTML session data for a specific workflow. This prevents key collisions when multiple workflows are active in the same application.\nEach workflow gets its own namespace within the session, making it easy to manage multi-step processes without worrying about overwriting data from other workflows.\n\nsource\n\n\n\n WorkflowSession (sess:Any, workflow_id:str)\n\nManage workflow state within FastHTML sessions with proper namespacing.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsess\nAny\nFastHTML session object (from route handler parameter)\n\n\nworkflow_id\nstr\nUnique identifier for this workflow (e.g., “registration”, “checkout”)",
    "crumbs": [
      "core",
      "WorkflowSession"
    ]
  },
  {
    "objectID": "core/workflow_session.html#usage-examples",
    "href": "core/workflow_session.html#usage-examples",
    "title": "WorkflowSession",
    "section": "Usage Examples",
    "text": "Usage Examples\nThese examples demonstrate how to use WorkflowSession with a mock session object. In a real FastHTML application, the sess parameter is automatically provided by the framework.\n\n# Create a mock session (in FastHTML, this is provided automatically)\nmock_session = {}\n\n# Create workflow session for a registration workflow\nworkflow = WorkflowSession(mock_session, \"registration\")\nworkflow\n\n&lt;__main__.WorkflowSession&gt;\n\n\n\n# Store some values\nworkflow.set(\"email\", \"user@example.com\")\nworkflow.set(\"username\", \"john_doe\")\nworkflow.set(\"step\", 2)\n\n# Show the underlying session (note the prefixed keys)\nmock_session\n\n{'workflow_registration_email': 'user@example.com',\n '__registration_last_modified': 1761790891.4871387,\n 'workflow_registration_username': 'john_doe',\n 'workflow_registration_step': 2}\n\n\n\n# Retrieve values\nemail = workflow.get(\"email\")\nusername = workflow.get(\"username\")\nprint(f\"Email: {email}\")\nprint(f\"Username: {username}\")\n\nEmail: user@example.com\nUsername: john_doe\n\n\n\n# Get all workflow data\nall_data = workflow.get_all()\nprint(\"All workflow data:\")\nall_data\n\nAll workflow data:\n\n\n{'email': 'user@example.com', 'username': 'john_doe', 'step': 2}\n\n\n\n# Check if key exists\nhas_email = workflow.has(\"email\")\nhas_password = workflow.has(\"password\")\nprint(f\"Has email: {has_email}\")\nprint(f\"Has password: {has_password}\")\n\nHas email: True\nHas password: False\n\n\n\n# Create a second workflow in the same session - no collision!\ncheckout_workflow = WorkflowSession(mock_session, \"checkout\")\ncheckout_workflow.set(\"step\", 1)  # Same key name, different workflow\ncheckout_workflow.set(\"cart_total\", 99.99)\n\nprint(f\"Registration step: {workflow.get('step')}\")\nprint(f\"Checkout step: {checkout_workflow.get('step')}\")\nprint(f\"\\nSession now contains both workflows:\")\nmock_session\n\nRegistration step: 2\nCheckout step: 1\n\nSession now contains both workflows:\n\n\n{'workflow_registration_email': 'user@example.com',\n '__registration_last_modified': 1761790891.4871387,\n 'workflow_registration_username': 'john_doe',\n 'workflow_registration_step': 2,\n 'workflow_checkout_step': 1,\n '__checkout_last_modified': 1761790891.557961,\n 'workflow_checkout_cart_total': 99.99}\n\n\n\n# Delete a specific key\nworkflow.delete(\"step\")\nprint(f\"Step after deletion: {workflow.get('step', 'Not found')}\")\nworkflow.get_all()\n\nStep after deletion: Not found\n\n\n{'email': 'user@example.com', 'username': 'john_doe'}\n\n\n\n# Clear all workflow data\nworkflow.clear()\nprint(\"After clearing registration workflow:\")\nprint(f\"Registration data: {workflow.get_all()}\")\nprint(f\"Checkout data: {checkout_workflow.get_all()}\")\nprint(f\"\\nSession (checkout workflow still intact):\")\nmock_session\n\nAfter clearing registration workflow:\nRegistration data: {}\nCheckout data: {'step': 1, 'cart_total': 99.99}\n\nSession (checkout workflow still intact):\n\n\n{'__registration_last_modified': 1761790891.5890539,\n 'workflow_checkout_step': 1,\n '__checkout_last_modified': 1761790891.557961,\n 'workflow_checkout_cart_total': 99.99}\n\n\n\n# Using with default values\nempty_workflow = WorkflowSession({}, \"empty\")\nvalue = empty_workflow.get(\"nonexistent\", \"default_value\")\nprint(f\"Value with default: {value}\")\n\nValue with default: default_value",
    "crumbs": [
      "core",
      "WorkflowSession"
    ]
  },
  {
    "objectID": "core/helpers.html",
    "href": "core/helpers.html",
    "title": "Helpers",
    "section": "",
    "text": "These helper functions provide convenient patterns for common workflow operations.\n\n\nRetrieve job-related display information from session with fallbacks to job attributes.\n\nsource\n\n\n\n\n get_job_session_info (job_id:str, job:Any, sess:Any,\n                       fallback_fields:Optional[Dict[str,Any]]=None)\n\nRetrieve job-related display information from session with fallbacks.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\njob_id\nstr\n\nUnique job identifier\n\n\njob\nAny\n\nJob object (should have attributes like file_name, file_path, plugin_id)\n\n\nsess\nAny\n\nFastHTML session object\n\n\nfallback_fields\nOptional\nNone\nOptional additional fallback fields\n\n\nReturns\nTuple\n\n(file_info, plugin_info) dictionaries\n\n\n\n\n\n\nfrom cjm_fasthtml_workflows.core.job_session import JobSessionManager\n\n# Create mock job object\nclass MockJob:\n    def __init__(self, job_id, file_name, file_path, plugin_id):\n        self.id = job_id\n        self.file_name = file_name\n        self.file_path = file_path\n        self.plugin_id = plugin_id\n\n# Create session with stored metadata\nsession = {}\njob_sess = JobSessionManager(session)\njob_sess.store_job_metadata(\"job-123\", {\n    \"file_info\": {\"name\": \"audio.mp3\", \"path\": \"/media/audio.mp3\", \"size\": 5000},\n    \"plugin_info\": {\"title\": \"Whisper Large\", \"id\": \"whisper_large\", \"version\": \"3.0\"}\n})\n\n# Create mock job\njob = MockJob(\"job-123\", \"fallback.mp3\", \"/fallback/path\", \"fallback_plugin\")\n\n# Get info (should use session data, not fallback)\nfile_info, plugin_info = get_job_session_info(\"job-123\", job, session)\nprint(\"File info:\", file_info)\nprint(\"Plugin info:\", plugin_info)\n\nFile info: {'name': 'audio.mp3', 'path': '/media/audio.mp3', 'size': 5000}\nPlugin info: {'title': 'Whisper Large', 'id': 'whisper_large', 'version': '3.0'}\n\n\n\n# Test with no session metadata (uses job attributes as fallback)\nempty_session = {}\njob2 = MockJob(\"job-456\", \"meeting.mp3\", \"/media/meeting.mp3\", \"whisper_base\")\n\nfile_info2, plugin_info2 = get_job_session_info(\"job-456\", job2, empty_session)\nprint(\"\\nFile info (from job attrs):\", file_info2)\nprint(\"Plugin info (from job attrs):\", plugin_info2)\n\n\nFile info (from job attrs): {'name': 'meeting.mp3', 'path': '/media/meeting.mp3'}\nPlugin info (from job attrs): {'title': 'whisper_base', 'id': 'whisper_base'}\n\n\n\n# Test with additional fallback fields\nfile_info3, plugin_info3 = get_job_session_info(\n    \"job-789\", \n    job2, \n    empty_session,\n    fallback_fields={\n        \"file_info\": {\"format\": \"mp3\", \"duration\": 120},\n        \"plugin_info\": {\"provider\": \"OpenAI\"}\n    }\n)\nprint(\"\\nFile info (with extra fallbacks):\", file_info3)\nprint(\"Plugin info (with extra fallbacks):\", plugin_info3)\n\n\nFile info (with extra fallbacks): {'name': 'meeting.mp3', 'path': '/media/meeting.mp3', 'format': 'mp3', 'duration': 120}\nPlugin info (with extra fallbacks): {'title': 'whisper_base', 'id': 'whisper_base', 'provider': 'OpenAI'}\n\n\n\n\n\n\nExecute an operation once per job using automatic deduplication.\n\nsource\n\n\n\n\n once_per_job (sess:Any, job_id:str, operation:Callable[[],Any],\n               tracker_id:str='default_operation')\n\nExecute an operation once per job using automatic deduplication.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsess\nAny\n\nFastHTML session object\n\n\njob_id\nstr\n\nUnique job identifier\n\n\noperation\nCallable\n\nCallable to execute (should take no arguments)\n\n\ntracker_id\nstr\ndefault_operation\nUnique identifier for this operation type\n\n\nReturns\nOptional\n\nResult of operation if executed, None if already processed\n\n\n\n\n\n\n# Simulate a session\nsession = {}\n\n# Counter to track how many times operation is executed\nexecution_count = {'save': 0, 'notify': 0}\n\ndef save_to_disk(job_id, data):\n    execution_count['save'] += 1\n    print(f\"  [SAVE] Saving {job_id}: {data}\")\n    return f\"Saved {job_id}\"\n\ndef send_notification(job_id):\n    execution_count['notify'] += 1\n    print(f\"  [NOTIFY] Sending email for {job_id}\")\n    return f\"Notified for {job_id}\"\n\n# First call - should execute\nprint(\"Call 1:\")\nresult1 = once_per_job(\n    session, \"job-abc\",\n    lambda: save_to_disk(\"job-abc\", {\"text\": \"Hello\"}),\n    tracker_id=\"save_operation\"\n)\nprint(f\"  Result: {result1}\")\n\n# Second call - should skip\nprint(\"\\nCall 2 (duplicate):\")\nresult2 = once_per_job(\n    session, \"job-abc\",\n    lambda: save_to_disk(\"job-abc\", {\"text\": \"Hello\"}),\n    tracker_id=\"save_operation\"\n)\nprint(f\"  Result: {result2}\")\n\nprint(f\"\\nTotal save operations: {execution_count['save']}\")\n\nCall 1:\n  [SAVE] Saving job-abc: {'text': 'Hello'}\n  Result: Saved job-abc\n\nCall 2 (duplicate):\n  Result: None\n\nTotal save operations: 1\n\n\n\n# Multiple operations for same job\nprint(\"\\nMultiple operations for job-abc:\")\n\n# Save operation (already done, will skip)\nonce_per_job(\n    session, \"job-abc\",\n    lambda: save_to_disk(\"job-abc\", {\"text\": \"Hello\"}),\n    tracker_id=\"save_operation\"\n)\n\n# Notification (first time, will execute)\nonce_per_job(\n    session, \"job-abc\",\n    lambda: send_notification(\"job-abc\"),\n    tracker_id=\"notification_operation\"\n)\n\n# Notification again (duplicate, will skip)\nonce_per_job(\n    session, \"job-abc\",\n    lambda: send_notification(\"job-abc\"),\n    tracker_id=\"notification_operation\"\n)\n\nprint(f\"\\nTotal operations:\")\nprint(f\"  Saves: {execution_count['save']}\")\nprint(f\"  Notifications: {execution_count['notify']}\")\nprint(f\"\\nSession state:\")\nsession\n\n\nMultiple operations for job-abc:\n  [NOTIFY] Sending email for job-abc\n\nTotal operations:\n  Saves: 1\n  Notifications: 1\n\nSession state:\n\n\n{'dedup_save_operation': ['job-abc'],\n 'dedup_notification_operation': ['job-abc']}\n\n\n\n# Error handling - operation fails, not marked as processed\ndef failing_operation():\n    print(\"  [ERROR] Operation failed!\")\n    raise ValueError(\"Simulated error\")\n\nprint(\"\\nTesting error handling:\")\ntry:\n    once_per_job(\n        session, \"job-xyz\",\n        failing_operation,\n        tracker_id=\"save_operation\"\n    )\nexcept ValueError as e:\n    print(f\"  Caught error: {e}\")\n\n# Check if job was marked as processed (it shouldn't be)\ntracker = DeduplicationTracker(session, \"save_operation\")\nprint(f\"\\nJob-xyz marked as processed: {tracker.is_processed('job-xyz')}\")\nprint(\"(False means we can retry the operation)\")\n\n\nTesting error handling:\n  [ERROR] Operation failed!\n  Caught error: Simulated error\n\nJob-xyz marked as processed: False\n(False means we can retry the operation)",
    "crumbs": [
      "core",
      "Helpers"
    ]
  },
  {
    "objectID": "core/helpers.html#helper-functions",
    "href": "core/helpers.html#helper-functions",
    "title": "Helpers",
    "section": "",
    "text": "These helper functions provide convenient patterns for common workflow operations.\n\n\nRetrieve job-related display information from session with fallbacks to job attributes.\n\nsource\n\n\n\n\n get_job_session_info (job_id:str, job:Any, sess:Any,\n                       fallback_fields:Optional[Dict[str,Any]]=None)\n\nRetrieve job-related display information from session with fallbacks.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\njob_id\nstr\n\nUnique job identifier\n\n\njob\nAny\n\nJob object (should have attributes like file_name, file_path, plugin_id)\n\n\nsess\nAny\n\nFastHTML session object\n\n\nfallback_fields\nOptional\nNone\nOptional additional fallback fields\n\n\nReturns\nTuple\n\n(file_info, plugin_info) dictionaries\n\n\n\n\n\n\nfrom cjm_fasthtml_workflows.core.job_session import JobSessionManager\n\n# Create mock job object\nclass MockJob:\n    def __init__(self, job_id, file_name, file_path, plugin_id):\n        self.id = job_id\n        self.file_name = file_name\n        self.file_path = file_path\n        self.plugin_id = plugin_id\n\n# Create session with stored metadata\nsession = {}\njob_sess = JobSessionManager(session)\njob_sess.store_job_metadata(\"job-123\", {\n    \"file_info\": {\"name\": \"audio.mp3\", \"path\": \"/media/audio.mp3\", \"size\": 5000},\n    \"plugin_info\": {\"title\": \"Whisper Large\", \"id\": \"whisper_large\", \"version\": \"3.0\"}\n})\n\n# Create mock job\njob = MockJob(\"job-123\", \"fallback.mp3\", \"/fallback/path\", \"fallback_plugin\")\n\n# Get info (should use session data, not fallback)\nfile_info, plugin_info = get_job_session_info(\"job-123\", job, session)\nprint(\"File info:\", file_info)\nprint(\"Plugin info:\", plugin_info)\n\nFile info: {'name': 'audio.mp3', 'path': '/media/audio.mp3', 'size': 5000}\nPlugin info: {'title': 'Whisper Large', 'id': 'whisper_large', 'version': '3.0'}\n\n\n\n# Test with no session metadata (uses job attributes as fallback)\nempty_session = {}\njob2 = MockJob(\"job-456\", \"meeting.mp3\", \"/media/meeting.mp3\", \"whisper_base\")\n\nfile_info2, plugin_info2 = get_job_session_info(\"job-456\", job2, empty_session)\nprint(\"\\nFile info (from job attrs):\", file_info2)\nprint(\"Plugin info (from job attrs):\", plugin_info2)\n\n\nFile info (from job attrs): {'name': 'meeting.mp3', 'path': '/media/meeting.mp3'}\nPlugin info (from job attrs): {'title': 'whisper_base', 'id': 'whisper_base'}\n\n\n\n# Test with additional fallback fields\nfile_info3, plugin_info3 = get_job_session_info(\n    \"job-789\", \n    job2, \n    empty_session,\n    fallback_fields={\n        \"file_info\": {\"format\": \"mp3\", \"duration\": 120},\n        \"plugin_info\": {\"provider\": \"OpenAI\"}\n    }\n)\nprint(\"\\nFile info (with extra fallbacks):\", file_info3)\nprint(\"Plugin info (with extra fallbacks):\", plugin_info3)\n\n\nFile info (with extra fallbacks): {'name': 'meeting.mp3', 'path': '/media/meeting.mp3', 'format': 'mp3', 'duration': 120}\nPlugin info (with extra fallbacks): {'title': 'whisper_base', 'id': 'whisper_base', 'provider': 'OpenAI'}\n\n\n\n\n\n\nExecute an operation once per job using automatic deduplication.\n\nsource\n\n\n\n\n once_per_job (sess:Any, job_id:str, operation:Callable[[],Any],\n               tracker_id:str='default_operation')\n\nExecute an operation once per job using automatic deduplication.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsess\nAny\n\nFastHTML session object\n\n\njob_id\nstr\n\nUnique job identifier\n\n\noperation\nCallable\n\nCallable to execute (should take no arguments)\n\n\ntracker_id\nstr\ndefault_operation\nUnique identifier for this operation type\n\n\nReturns\nOptional\n\nResult of operation if executed, None if already processed\n\n\n\n\n\n\n# Simulate a session\nsession = {}\n\n# Counter to track how many times operation is executed\nexecution_count = {'save': 0, 'notify': 0}\n\ndef save_to_disk(job_id, data):\n    execution_count['save'] += 1\n    print(f\"  [SAVE] Saving {job_id}: {data}\")\n    return f\"Saved {job_id}\"\n\ndef send_notification(job_id):\n    execution_count['notify'] += 1\n    print(f\"  [NOTIFY] Sending email for {job_id}\")\n    return f\"Notified for {job_id}\"\n\n# First call - should execute\nprint(\"Call 1:\")\nresult1 = once_per_job(\n    session, \"job-abc\",\n    lambda: save_to_disk(\"job-abc\", {\"text\": \"Hello\"}),\n    tracker_id=\"save_operation\"\n)\nprint(f\"  Result: {result1}\")\n\n# Second call - should skip\nprint(\"\\nCall 2 (duplicate):\")\nresult2 = once_per_job(\n    session, \"job-abc\",\n    lambda: save_to_disk(\"job-abc\", {\"text\": \"Hello\"}),\n    tracker_id=\"save_operation\"\n)\nprint(f\"  Result: {result2}\")\n\nprint(f\"\\nTotal save operations: {execution_count['save']}\")\n\nCall 1:\n  [SAVE] Saving job-abc: {'text': 'Hello'}\n  Result: Saved job-abc\n\nCall 2 (duplicate):\n  Result: None\n\nTotal save operations: 1\n\n\n\n# Multiple operations for same job\nprint(\"\\nMultiple operations for job-abc:\")\n\n# Save operation (already done, will skip)\nonce_per_job(\n    session, \"job-abc\",\n    lambda: save_to_disk(\"job-abc\", {\"text\": \"Hello\"}),\n    tracker_id=\"save_operation\"\n)\n\n# Notification (first time, will execute)\nonce_per_job(\n    session, \"job-abc\",\n    lambda: send_notification(\"job-abc\"),\n    tracker_id=\"notification_operation\"\n)\n\n# Notification again (duplicate, will skip)\nonce_per_job(\n    session, \"job-abc\",\n    lambda: send_notification(\"job-abc\"),\n    tracker_id=\"notification_operation\"\n)\n\nprint(f\"\\nTotal operations:\")\nprint(f\"  Saves: {execution_count['save']}\")\nprint(f\"  Notifications: {execution_count['notify']}\")\nprint(f\"\\nSession state:\")\nsession\n\n\nMultiple operations for job-abc:\n  [NOTIFY] Sending email for job-abc\n\nTotal operations:\n  Saves: 1\n  Notifications: 1\n\nSession state:\n\n\n{'dedup_save_operation': ['job-abc'],\n 'dedup_notification_operation': ['job-abc']}\n\n\n\n# Error handling - operation fails, not marked as processed\ndef failing_operation():\n    print(\"  [ERROR] Operation failed!\")\n    raise ValueError(\"Simulated error\")\n\nprint(\"\\nTesting error handling:\")\ntry:\n    once_per_job(\n        session, \"job-xyz\",\n        failing_operation,\n        tracker_id=\"save_operation\"\n    )\nexcept ValueError as e:\n    print(f\"  Caught error: {e}\")\n\n# Check if job was marked as processed (it shouldn't be)\ntracker = DeduplicationTracker(session, \"save_operation\")\nprint(f\"\\nJob-xyz marked as processed: {tracker.is_processed('job-xyz')}\")\nprint(\"(False means we can retry the operation)\")\n\n\nTesting error handling:\n  [ERROR] Operation failed!\n  Caught error: Simulated error\n\nJob-xyz marked as processed: False\n(False means we can retry the operation)",
    "crumbs": [
      "core",
      "Helpers"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-fasthtml-workflows",
    "section": "",
    "text": "pip install cjm_fasthtml_workflows",
    "crumbs": [
      "cjm-fasthtml-workflows"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-fasthtml-workflows",
    "section": "",
    "text": "pip install cjm_fasthtml_workflows",
    "crumbs": [
      "cjm-fasthtml-workflows"
    ]
  },
  {
    "objectID": "index.html#project-structure",
    "href": "index.html#project-structure",
    "title": "cjm-fasthtml-workflows",
    "section": "Project Structure",
    "text": "Project Structure\nnbs/\n└── core/ (4)\n    ├── deduplication.ipynb     # Track one-time operations per job to prevent duplicates.\n    ├── helpers.ipynb           # Helper functions for common workflow patterns.\n    ├── job_session.ipynb       # Manage job-related metadata that needs to be accessed across multiple requests.\n    └── workflow_session.ipynb  # Namespaced workflow state management within FastHTML sessions.\nTotal: 4 notebooks across 1 directory",
    "crumbs": [
      "cjm-fasthtml-workflows"
    ]
  },
  {
    "objectID": "index.html#module-dependencies",
    "href": "index.html#module-dependencies",
    "title": "cjm-fasthtml-workflows",
    "section": "Module Dependencies",
    "text": "Module Dependencies\ngraph LR\n    core_deduplication[core.deduplication&lt;br/&gt;DeduplicationTracker]\n    core_helpers[core.helpers&lt;br/&gt;Helpers]\n    core_job_session[core.job_session&lt;br/&gt;JobSessionManager]\n    core_workflow_session[core.workflow_session&lt;br/&gt;WorkflowSession]\n\n    core_helpers --&gt; core_deduplication\n    core_helpers --&gt; core_job_session\n2 cross-module dependencies detected",
    "crumbs": [
      "cjm-fasthtml-workflows"
    ]
  },
  {
    "objectID": "index.html#cli-reference",
    "href": "index.html#cli-reference",
    "title": "cjm-fasthtml-workflows",
    "section": "CLI Reference",
    "text": "CLI Reference\nNo CLI commands found in this project.",
    "crumbs": [
      "cjm-fasthtml-workflows"
    ]
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "cjm-fasthtml-workflows",
    "section": "Module Overview",
    "text": "Module Overview\nDetailed documentation for each module in the project:\n\nDeduplicationTracker (deduplication.ipynb)\n\nTrack one-time operations per job to prevent duplicates.\n\n\nImport\nfrom cjm_fasthtml_workflows.core.deduplication import (\n    DeduplicationTracker\n)\n\n\nClasses\nclass DeduplicationTracker:\n    def __init__(\n        self, \n        sess:Any, # FastHTML session object\n        tracker_id:str # Unique identifier for this tracker (e.g., \"saved_jobs\", \"sent_notifications\")\n    )\n    \"Track one-time operations per job to prevent duplicates.\"\n    \n    def __init__(\n            self, \n            sess:Any, # FastHTML session object\n            tracker_id:str # Unique identifier for this tracker (e.g., \"saved_jobs\", \"sent_notifications\")\n        )\n        \"Initialize deduplication tracker.\"\n    \n    def is_processed(\n            self, \n            job_id:str # Unique job identifier\n        ) -&gt; bool: # True if job has been marked as processed, False otherwise\n        \"Check if a job has been processed.\"\n    \n    def mark_processed(\n            self, \n            job_id:str # Unique job identifier\n        ) -&gt; None\n        \"Mark a job as processed.\"\n    \n    def unmark_processed(\n            self, \n            job_id:str # Unique job identifier\n        ) -&gt; None\n        \"Remove processed mark from a job (allows reprocessing).\"\n    \n    def clear_all(self) -&gt; None:\n            \"\"\"Clear all processed job IDs.\"\"\"\n            if self._key in self.sess\n        \"Clear all processed job IDs.\"\n    \n    def get_all_processed(self) -&gt; Set[str]: # Set of job IDs that have been marked as processed\n        \"Get all processed job IDs.\"\n\n\n\nHelpers (helpers.ipynb)\n\nHelper functions for common workflow patterns.\n\n\nImport\nfrom cjm_fasthtml_workflows.core.helpers import (\n    get_job_session_info,\n    once_per_job\n)\n\n\nFunctions\ndef get_job_session_info(\n    job_id:str, # Unique job identifier\n    job:Any, # Job object (should have attributes like file_name, file_path, plugin_id)\n    sess:Any, # FastHTML session object\n    fallback_fields:Optional[Dict[str, Any]]=None # Optional additional fallback fields\n) -&gt; Tuple[Dict[str, Any], Dict[str, Any]]: # (file_info, plugin_info) dictionaries\n    \"Retrieve job-related display information from session with fallbacks.\"\ndef once_per_job(\n    sess:Any, # FastHTML session object\n    job_id:str, # Unique job identifier\n    operation:Callable[[], Any], # Callable to execute (should take no arguments)\n    tracker_id:str=\"default_operation\" # Unique identifier for this operation type\n) -&gt; Optional[Any]: # Result of operation if executed, None if already processed\n    \"Execute an operation once per job using automatic deduplication.\"\n\n\n\nJobSessionManager (job_session.ipynb)\n\nManage job-related metadata that needs to be accessed across multiple requests.\n\n\nImport\nfrom cjm_fasthtml_workflows.core.job_session import (\n    JobSessionManager\n)\n\n\nClasses\nclass JobSessionManager:\n    def __init__(\n        self, \n        sess:Any, # FastHTML session object\n        prefix:str=\"job\" # Prefix for job keys in session\n    )\n    \"Manage job-related metadata that needs to be accessed across multiple requests.\"\n    \n    def __init__(\n            self, \n            sess:Any, # FastHTML session object\n            prefix:str=\"job\" # Prefix for job keys in session\n        )\n        \"Initialize job session manager.\"\n    \n    def store_job_metadata(\n            self, \n            job_id:str, # Unique job identifier\n            metadata:Dict[str, Any] # Dictionary of metadata to store\n        ) -&gt; None\n        \"Store metadata for a job.\"\n    \n    def get_job_metadata(\n            self, \n            job_id:str, # Unique job identifier\n            default:Optional[Dict[str, Any]]=None # Default value if metadata not found\n        ) -&gt; Dict[str, Any]: # Job metadata dictionary\n        \"Retrieve metadata for a job.\"\n    \n    def delete_job_metadata(\n            self, \n            job_id:str # Unique job identifier\n        ) -&gt; None\n        \"Remove metadata for a job.\"\n    \n    def clear_all_jobs(self) -&gt; None:\n            \"\"\"Clear all job metadata from session.\"\"\"\n            keys_to_delete = [k for k in self.sess.keys() if k.startswith(f\"{self.prefix}_\")]\n            for key in keys_to_delete\n        \"Clear all job metadata from session.\"\n\n\n\nWorkflowSession (workflow_session.ipynb)\n\nNamespaced workflow state management within FastHTML sessions.\n\n\nImport\nfrom cjm_fasthtml_workflows.core.workflow_session import (\n    WorkflowSession\n)\n\n\nClasses\nclass WorkflowSession:\n    def __init__(\n        self, \n        sess:Any, # FastHTML session object (from route handler parameter)\n        workflow_id:str # Unique identifier for this workflow (e.g., \"registration\", \"checkout\")\n    )\n    \"Manage workflow state within FastHTML sessions with proper namespacing.\"\n    \n    def __init__(\n            self, \n            sess:Any, # FastHTML session object (from route handler parameter)\n            workflow_id:str # Unique identifier for this workflow (e.g., \"registration\", \"checkout\")\n        )\n        \"Initialize workflow session wrapper.\"\n    \n    def set(\n            self, \n            key:str, # Key name within this workflow namespace\n            value:Any # Value to store (must be JSON-serializable for session storage)\n        ) -&gt; None\n        \"Store value in workflow session.\"\n    \n    def get(\n            self, \n            key:str, # Key name within this workflow namespace\n            default:Any=None # Default value if key not found\n        ) -&gt; Any: # Stored value or default\n        \"Retrieve value from workflow session.\"\n    \n    def delete(\n            self, \n            key:str # Key name within this workflow namespace\n        ) -&gt; None\n        \"Remove value from workflow session.\"\n    \n    def clear(self) -&gt; None:\n            \"\"\"Clear all data for this workflow from session.\"\"\"\n            keys_to_delete = [k for k in self.sess.keys() if k.startswith(self._prefix)]\n            for key in keys_to_delete\n        \"Clear all data for this workflow from session.\"\n    \n    def get_all(self) -&gt; Dict[str, Any]: # Dictionary mapping original keys to their values\n            \"\"\"Get all workflow data as a dictionary with original (unprefixed) keys.\"\"\"\n            result = {}\n            prefix_len = len(self._prefix)\n            for key, value in self.sess.items()\n        \"Get all workflow data as a dictionary with original (unprefixed) keys.\"\n    \n    def has(\n            self, \n            key:str # Key name within this workflow namespace\n        ) -&gt; bool: # True if key exists, False otherwise\n        \"Check if key exists in workflow session.\"",
    "crumbs": [
      "cjm-fasthtml-workflows"
    ]
  },
  {
    "objectID": "core/deduplication.html",
    "href": "core/deduplication.html",
    "title": "DeduplicationTracker",
    "section": "",
    "text": "The DeduplicationTracker ensures that operations are performed exactly once per job within a user’s session. This is useful for operations that should only happen once, such as:\n\nAuto-saving results to disk\nSending email notifications\nLogging completion events\nCreating database records\n\nThe tracker stores job IDs in the session, so tracking persists across requests but is scoped to each user.\n\nsource\n\n\n\n DeduplicationTracker (sess:Any, tracker_id:str)\n\nTrack one-time operations per job to prevent duplicates.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsess\nAny\nFastHTML session object\n\n\ntracker_id\nstr\nUnique identifier for this tracker (e.g., “saved_jobs”, “sent_notifications”)",
    "crumbs": [
      "core",
      "DeduplicationTracker"
    ]
  },
  {
    "objectID": "core/deduplication.html#deduplicationtracker-class",
    "href": "core/deduplication.html#deduplicationtracker-class",
    "title": "DeduplicationTracker",
    "section": "",
    "text": "The DeduplicationTracker ensures that operations are performed exactly once per job within a user’s session. This is useful for operations that should only happen once, such as:\n\nAuto-saving results to disk\nSending email notifications\nLogging completion events\nCreating database records\n\nThe tracker stores job IDs in the session, so tracking persists across requests but is scoped to each user.\n\nsource\n\n\n\n DeduplicationTracker (sess:Any, tracker_id:str)\n\nTrack one-time operations per job to prevent duplicates.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsess\nAny\nFastHTML session object\n\n\ntracker_id\nstr\nUnique identifier for this tracker (e.g., “saved_jobs”, “sent_notifications”)",
    "crumbs": [
      "core",
      "DeduplicationTracker"
    ]
  },
  {
    "objectID": "core/deduplication.html#usage-examples",
    "href": "core/deduplication.html#usage-examples",
    "title": "DeduplicationTracker",
    "section": "Usage Examples",
    "text": "Usage Examples\nThese examples demonstrate how to use DeduplicationTracker to prevent duplicate operations.\n\n# Create a mock session\nmock_session = {}\n\n# Create a tracker for saved jobs\ntracker = DeduplicationTracker(mock_session, \"saved_jobs\")\ntracker\n\n&lt;__main__.DeduplicationTracker&gt;\n\n\n\n# Check if job has been processed (initially false)\nis_processed = tracker.is_processed(\"job-123\")\nprint(f\"Job-123 processed: {is_processed}\")\n\nJob-123 processed: False\n\n\n\n# Mark job as processed\ntracker.mark_processed(\"job-123\")\nprint(f\"Job-123 processed: {tracker.is_processed('job-123')}\")\nprint(f\"Session state: {mock_session}\")\n\nJob-123 processed: True\nSession state: {'dedup_saved_jobs': ['job-123'], '__dedup_saved_jobs_last_modified': 1761793147.8636549}\n\n\n\n# Mark multiple jobs\ntracker.mark_processed(\"job-456\")\ntracker.mark_processed(\"job-789\")\n\nall_processed = tracker.get_all_processed()\nprint(f\"All processed jobs: {all_processed}\")\n\nAll processed jobs: {'job-123', 'job-456', 'job-789'}\n\n\n\n# Unmark a job (allow reprocessing)\ntracker.unmark_processed(\"job-456\")\nprint(f\"Job-456 processed: {tracker.is_processed('job-456')}\")\nprint(f\"Remaining: {tracker.get_all_processed()}\")\n\nJob-456 processed: False\nRemaining: {'job-123', 'job-789'}\n\n\n\n# Clear all processed jobs\ntracker.clear_all()\nprint(f\"After clearing: {tracker.get_all_processed()}\")\nprint(f\"Session state: {mock_session}\")\n\nAfter clearing: set()\nSession state: {'__dedup_saved_jobs_last_modified': 1761793147.915495}",
    "crumbs": [
      "core",
      "DeduplicationTracker"
    ]
  },
  {
    "objectID": "core/deduplication.html#multiple-trackers",
    "href": "core/deduplication.html#multiple-trackers",
    "title": "DeduplicationTracker",
    "section": "Multiple Trackers",
    "text": "Multiple Trackers\nYou can use multiple trackers in the same session for different types of operations:\n\nsession = {}\n\n# Tracker for saved jobs\nsave_tracker = DeduplicationTracker(session, \"saved_jobs\")\nsave_tracker.mark_processed(\"job-001\")\nsave_tracker.mark_processed(\"job-002\")\n\n# Tracker for sent notifications\nnotify_tracker = DeduplicationTracker(session, \"sent_notifications\")\nnotify_tracker.mark_processed(\"job-001\")\n\n# Tracker for logged events\nlog_tracker = DeduplicationTracker(session, \"logged_events\")\nlog_tracker.mark_processed(\"job-001\")\nlog_tracker.mark_processed(\"job-002\")\nlog_tracker.mark_processed(\"job-003\")\n\nprint(\"Session with multiple trackers:\")\nfor key, value in session.items():\n    print(f\"  {key}: {value}\")\n\nSession with multiple trackers:\n  dedup_saved_jobs: ['job-001', 'job-002']\n  __dedup_saved_jobs_last_modified: 1761793147.9306018\n  dedup_sent_notifications: ['job-001']\n  __dedup_sent_notifications_last_modified: 1761793147.9306183\n  dedup_logged_events: ['job-003', 'job-001', 'job-002']\n  __dedup_logged_events_last_modified: 1761793147.9306488\n\n\n\n# Each tracker is independent\nprint(f\"Job-001 saved: {save_tracker.is_processed('job-001')}\")\nprint(f\"Job-001 notified: {notify_tracker.is_processed('job-001')}\")\nprint(f\"Job-001 logged: {log_tracker.is_processed('job-001')}\")\nprint(f\"\\nJob-002 saved: {save_tracker.is_processed('job-002')}\")\nprint(f\"Job-002 notified: {notify_tracker.is_processed('job-002')}\")\nprint(f\"Job-002 logged: {log_tracker.is_processed('job-002')}\")\n\nJob-001 saved: True\nJob-001 notified: True\nJob-001 logged: True\n\nJob-002 saved: True\nJob-002 notified: False\nJob-002 logged: True",
    "crumbs": [
      "core",
      "DeduplicationTracker"
    ]
  },
  {
    "objectID": "core/deduplication.html#real-world-pattern",
    "href": "core/deduplication.html#real-world-pattern",
    "title": "DeduplicationTracker",
    "section": "Real-World Pattern",
    "text": "Real-World Pattern\nHere’s a typical pattern for using the tracker to prevent duplicate saves:\n\n# Simulate a session\nuser_session = {}\n\ndef save_result_to_disk(job_id, data):\n    \"\"\"Simulated disk save operation.\"\"\"\n    print(f\"  [DISK] Saving result for {job_id}: {data}\")\n    # In real code: write to file, database, etc.\n\ndef save_job_result_once(sess, job_id, data):\n    \"\"\"\n    Save job result to disk, ensuring it's only saved once.\n    \n    This prevents duplicate saves even if the route is called multiple times.\n    \"\"\"\n    tracker = DeduplicationTracker(sess, \"saved_jobs\")\n    \n    if tracker.is_processed(job_id):\n        print(f\"  [SKIP] Job {job_id} already saved\")\n        return\n    \n    try:\n        save_result_to_disk(job_id, data)\n        tracker.mark_processed(job_id)\n        print(f\"  [SUCCESS] Job {job_id} saved and marked\")\n    except Exception as e:\n        print(f\"  [ERROR] Failed to save job {job_id}: {e}\")\n        # Note: job is NOT marked as processed, so it can be retried\n\n# Simulate multiple calls (e.g., page refreshes, SSE polling, etc.)\nprint(\"First call:\")\nsave_job_result_once(user_session, \"job-abc\", {\"text\": \"Hello world\"})\n\nprint(\"\\nSecond call (duplicate):\")\nsave_job_result_once(user_session, \"job-abc\", {\"text\": \"Hello world\"})\n\nprint(\"\\nThird call (duplicate):\")\nsave_job_result_once(user_session, \"job-abc\", {\"text\": \"Hello world\"})\n\nprint(\"\\nDifferent job:\")\nsave_job_result_once(user_session, \"job-xyz\", {\"text\": \"Goodbye world\"})\n\nprint(\"\\nFinal session state:\")\nuser_session\n\nFirst call:\n  [DISK] Saving result for job-abc: {'text': 'Hello world'}\n  [SUCCESS] Job job-abc saved and marked\n\nSecond call (duplicate):\n  [SKIP] Job job-abc already saved\n\nThird call (duplicate):\n  [SKIP] Job job-abc already saved\n\nDifferent job:\n  [DISK] Saving result for job-xyz: {'text': 'Goodbye world'}\n  [SUCCESS] Job job-xyz saved and marked\n\nFinal session state:\n\n\n{'dedup_saved_jobs': ['job-abc', 'job-xyz'],\n '__dedup_saved_jobs_last_modified': 1761793147.9616601}",
    "crumbs": [
      "core",
      "DeduplicationTracker"
    ]
  },
  {
    "objectID": "core/job_session.html",
    "href": "core/job_session.html",
    "title": "JobSessionManager",
    "section": "",
    "text": "The JobSessionManager bridges the gap between job execution (managed by job managers) and presentation logic (in route handlers) by storing display-related metadata in the user’s session.\nThis is useful when: - Job managers handle execution but don’t track UI-specific data - You need to preserve user-selected options for displaying job results - Multiple routes need to access the same job display information\n\nsource\n\n\n\n JobSessionManager (sess:Any, prefix:str='job')\n\nManage job-related metadata that needs to be accessed across multiple requests.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsess\nAny\n\nFastHTML session object\n\n\nprefix\nstr\njob\nPrefix for job keys in session",
    "crumbs": [
      "core",
      "JobSessionManager"
    ]
  },
  {
    "objectID": "core/job_session.html#jobsessionmanager-class",
    "href": "core/job_session.html#jobsessionmanager-class",
    "title": "JobSessionManager",
    "section": "",
    "text": "The JobSessionManager bridges the gap between job execution (managed by job managers) and presentation logic (in route handlers) by storing display-related metadata in the user’s session.\nThis is useful when: - Job managers handle execution but don’t track UI-specific data - You need to preserve user-selected options for displaying job results - Multiple routes need to access the same job display information\n\nsource\n\n\n\n JobSessionManager (sess:Any, prefix:str='job')\n\nManage job-related metadata that needs to be accessed across multiple requests.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsess\nAny\n\nFastHTML session object\n\n\nprefix\nstr\njob\nPrefix for job keys in session",
    "crumbs": [
      "core",
      "JobSessionManager"
    ]
  },
  {
    "objectID": "core/job_session.html#usage-examples",
    "href": "core/job_session.html#usage-examples",
    "title": "JobSessionManager",
    "section": "Usage Examples",
    "text": "Usage Examples\nThese examples show how to use JobSessionManager to store and retrieve job-related metadata across different requests.\n\n# Create a mock session\nmock_session = {}\n\n# Create job session manager\njob_sess = JobSessionManager(mock_session)\njob_sess\n\n&lt;__main__.JobSessionManager&gt;\n\n\n\n# Store metadata for a transcription job\njob_sess.store_job_metadata(\"job-123\", {\n    \"file_info\": {\n        \"name\": \"interview.mp3\",\n        \"path\": \"/media/audio/interview.mp3\",\n        \"size\": 1024000\n    },\n    \"plugin_info\": {\n        \"id\": \"whisper_large\",\n        \"title\": \"Whisper Large\",\n        \"version\": \"3.0\"\n    },\n    \"user_preferences\": {\n        \"language\": \"en\",\n        \"format\": \"srt\"\n    }\n})\n\n# Show the session\nmock_session\n\n{'job_job-123': {'file_info': {'name': 'interview.mp3',\n   'path': '/media/audio/interview.mp3',\n   'size': 1024000},\n  'plugin_info': {'id': 'whisper_large',\n   'title': 'Whisper Large',\n   'version': '3.0'},\n  'user_preferences': {'language': 'en', 'format': 'srt'}}}\n\n\n\n# Retrieve job metadata\nmetadata = job_sess.get_job_metadata(\"job-123\")\nprint(f\"File: {metadata['file_info']['name']}\")\nprint(f\"Plugin: {metadata['plugin_info']['title']}\")\nprint(f\"Language: {metadata['user_preferences']['language']}\")\n\nFile: interview.mp3\nPlugin: Whisper Large\nLanguage: en\n\n\n\n# Store metadata for multiple jobs\njob_sess.store_job_metadata(\"job-456\", {\n    \"file_info\": {\"name\": \"podcast.mp3\"},\n    \"plugin_info\": {\"title\": \"Faster Whisper\"}\n})\n\njob_sess.store_job_metadata(\"job-789\", {\n    \"file_info\": {\"name\": \"lecture.mp4\"},\n    \"plugin_info\": {\"title\": \"Voxtral\"}\n})\n\nprint(\"Session now contains multiple jobs:\")\nmock_session\n\nSession now contains multiple jobs:\n\n\n{'job_job-123': {'file_info': {'name': 'interview.mp3',\n   'path': '/media/audio/interview.mp3',\n   'size': 1024000},\n  'plugin_info': {'id': 'whisper_large',\n   'title': 'Whisper Large',\n   'version': '3.0'},\n  'user_preferences': {'language': 'en', 'format': 'srt'}},\n 'job_job-456': {'file_info': {'name': 'podcast.mp3'},\n  'plugin_info': {'title': 'Faster Whisper'}},\n 'job_job-789': {'file_info': {'name': 'lecture.mp4'},\n  'plugin_info': {'title': 'Voxtral'}}}\n\n\n\n# Get metadata for non-existent job with default\nmissing_metadata = job_sess.get_job_metadata(\"job-999\", default={\"error\": \"Not found\"})\nmissing_metadata\n\n{'error': 'Not found'}\n\n\n\n# Delete specific job metadata\njob_sess.delete_job_metadata(\"job-456\")\nprint(\"After deleting job-456:\")\nmock_session\n\nAfter deleting job-456:\n\n\n{'job_job-123': {'file_info': {'name': 'interview.mp3',\n   'path': '/media/audio/interview.mp3',\n   'size': 1024000},\n  'plugin_info': {'id': 'whisper_large',\n   'title': 'Whisper Large',\n   'version': '3.0'},\n  'user_preferences': {'language': 'en', 'format': 'srt'}},\n 'job_job-789': {'file_info': {'name': 'lecture.mp4'},\n  'plugin_info': {'title': 'Voxtral'}}}\n\n\n\n# Clear all job metadata\njob_sess.clear_all_jobs()\nprint(\"After clearing all jobs:\")\nmock_session\n\nAfter clearing all jobs:\n\n\n{}\n\n\n\n# Example: Using with custom prefix\nprocessing_sess = JobSessionManager({}, prefix=\"processing\")\nprocessing_sess.store_job_metadata(\"task-001\", {\"status\": \"running\"})\n\n# Notice the different key prefix\nprocessing_sess.sess\n\n{'processing_task-001': {'status': 'running'}}",
    "crumbs": [
      "core",
      "JobSessionManager"
    ]
  },
  {
    "objectID": "core/job_session.html#real-world-usage-pattern",
    "href": "core/job_session.html#real-world-usage-pattern",
    "title": "JobSessionManager",
    "section": "Real-World Usage Pattern",
    "text": "Real-World Usage Pattern\nHere’s a typical pattern showing how job metadata flows through a multi-step process:\n\n# Simulating a workflow across multiple routes\nsession = {}\njob_manager = JobSessionManager(session)\n\n# Step 1: User starts a job\ndef start_job_route(job_id, file_name, plugin_title):\n    job_manager.store_job_metadata(job_id, {\n        \"file_info\": {\"name\": file_name},\n        \"plugin_info\": {\"title\": plugin_title},\n        \"started_at\": \"2025-01-01T00:00:00\"\n    })\n    print(f\"Job {job_id} started with {file_name}\")\n\n# Step 2: Monitor job progress\ndef monitor_job_route(job_id):\n    metadata = job_manager.get_job_metadata(job_id)\n    if metadata:\n        print(f\"Monitoring job {job_id}: {metadata['file_info']['name']} using {metadata['plugin_info']['title']}\")\n    else:\n        print(f\"Job {job_id} not found\")\n\n# Step 3: Display results\ndef show_results_route(job_id):\n    metadata = job_manager.get_job_metadata(job_id)\n    if metadata:\n        print(f\"Results for {metadata['file_info']['name']}\")\n        print(f\"Processed by: {metadata['plugin_info']['title']}\")\n        print(f\"Started: {metadata['started_at']}\")\n\n# Simulate the workflow\nprint(\"=== Simulated Workflow ===\")\nstart_job_route(\"job-abc\", \"meeting.mp3\", \"Whisper\")\nmonitor_job_route(\"job-abc\")\nshow_results_route(\"job-abc\")\nprint(\"\\nSession state:\")\nsession\n\n=== Simulated Workflow ===\nJob job-abc started with meeting.mp3\nMonitoring job job-abc: meeting.mp3 using Whisper\nResults for meeting.mp3\nProcessed by: Whisper\nStarted: 2025-01-01T00:00:00\n\nSession state:\n\n\n{'job_job-abc': {'file_info': {'name': 'meeting.mp3'},\n  'plugin_info': {'title': 'Whisper'},\n  'started_at': '2025-01-01T00:00:00'}}",
    "crumbs": [
      "core",
      "JobSessionManager"
    ]
  }
]